name: GitHub Action for Portfolio
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      command:
        description: "Windows command to run"
        required: true
        default: 'echo "Hello from Windows!"'
        type: string

jobs:
  run-windows-command:
    runs-on: windows-latest
    env:
      NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
      RDP_USERNAME: ${{ secrets.RDP_USERNAME }}
      RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable RDP, configure user, and start ngrok
        shell: powershell
        run: |
          Write-Host "=== Enable Remote Desktop (RDP) and configure firewall ==="
          # Allow RDP connections
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0 -Force
          # Disable Network Level Authentication (NLA) to reduce handshake issues over tunnels
          New-Item -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations" -Name "RDP-Tcp" -Force | Out-Null
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "UserAuthentication" -Value 0 -Force
          # Open firewall for RDP
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

          Write-Host "=== Ensure RDP service is running ==="
          Set-Service -Name TermService -StartupType Automatic
          Start-Service -Name TermService

          Write-Host "=== Create RDP user ==="
          $rdpUser = if ($env:RDP_USERNAME) { $env:RDP_USERNAME } else { 'rdpuser' }
          $rdpPass = if ($env:RDP_PASSWORD) { $env:RDP_PASSWORD } else { 'RDPPass123!' }
          Write-Host "Using RDP user: $rdpUser"
          cmd /c "net user $rdpUser $rdpPass /add" | Out-Null
          cmd /c "net localgroup \"Remote Desktop Users\" $rdpUser /add" | Out-Null
          cmd /c "net localgroup administrators $rdpUser /add" | Out-Null

          Write-Host "=== Download and configure ngrok v3 ==="
          Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile ngrok.zip
          Expand-Archive -Path ngrok.zip -DestinationPath . -Force

          $ngrokDir = "$env:USERPROFILE\AppData\Local\ngrok"
          New-Item -ItemType Directory -Path $ngrokDir -Force | Out-Null
          if (-not $env:NGROK_AUTHTOKEN) {
            Write-Error "NGROK_AUTHTOKEN secret is not configured. Add it in your repository settings."
            exit 1
          }
          @"
          authtoken: $($env:NGROK_AUTHTOKEN)
          version: "3"
          web_addr: 127.0.0.1:4040
          tunnels:
            rdp:
              addr: 3389
              proto: tcp
          "@ | Set-Content -Path "$ngrokDir\ngrok.yml" -Encoding ASCII

          Write-Host "=== Start ngrok TCP tunnel for RDP ==="
          Start-Process -FilePath "$pwd\ngrok.exe" -ArgumentList "start rdp --config `"$ngrokDir\ngrok.yml`"" -WindowStyle Hidden
          Start-Sleep -Seconds 10

          Write-Host "=== Verify RDP port is listening locally ==="
          try {
            $tcpTest = Test-NetConnection -ComputerName 127.0.0.1 -Port 3389 -WarningAction SilentlyContinue
            if (-not $tcpTest.TcpTestSucceeded) { Write-Warning "Port 3389 is not listening locally. RDP may not be ready." }
          } catch {}

          Write-Host "=== Retrieve and print ngrok URL ==="
          try {
            $response = Invoke-RestMethod -Uri 'http://127.0.0.1:4040/api/tunnels' -ErrorAction Stop
            $tunnel = $response.tunnels | Where-Object { $_.proto -eq 'tcp' } | Select-Object -First 1
            if ($tunnel) {
              $public = $tunnel.public_url -replace '^tcp://',''
              Write-Host "ngrok RDP URL: $public"
              "RDP_URL=$public" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            } else {
              Write-Warning "No TCP tunnel found from ngrok API."
            }
          } catch {
            Write-Warning "Could not retrieve ngrok URL from local API (4040). Ensure web_addr is enabled in ngrok config. Error: $($_.Exception.Message)"
          }

          Write-Host "=== REMOTE DESKTOP CONNECTION INFO ==="
          Write-Host "Username: $rdpUser"
          Write-Host "Password: (configured)"
          Write-Host "Use the ngrok URL above to connect via Remote Desktop"
          Write-Host "Format: host:port (e.g., 0.tcp.ngrok.io:12345)"

      - name: Keep Session Alive for Remote Desktop Access
        shell: powershell
        run: |
          Write-Host "Keeping session alive for 6 hours..."
          Start-Sleep -Seconds 21600
